openapi: 3.0.3
info:
  title: Aquarium Store - Online Shop API
  description: This API is designed for an online aquarium store. It provides functionalities to browse a catalog, manage a shopping cart, and process orders.
  version: 1.0.0
servers:
  - url: "http://localhost:8080/api"
paths:
  /products:
    get:
      tags:
        - product
      summary: Get all products or filter by category
      operationId: getAllProducts
      parameters:
        - name: category
          in: query
          description: Category to filter products
          schema:
            type: string
            enum: [Food, Decor, Habitat, Animal]
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductDB'
    post:
      tags:
        - product
      summary: Create a product
      operationId: createProduct
      requestBody:
        description: A product object as input
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: Product created
        '400':
          description: Invalid JSON input

  /products/{id}:
    get:
      tags:
        - product
      summary: Get a product
      operationId: getProductById
      parameters:
        - name: id
          in: path
          description: product id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDB'
        '204':
          description: The product is not found with ID
    put:
      tags:
        - product
      summary: Update a product
      operationId: updateProductById
      parameters:
        - name: id
          in: path
          description: product id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductInput'
        '204':
          description: The product is not found with ID
        '400':
          description: Invalid JSON input
    delete:
      tags:
        - product
      summary: Delete a product
      operationId: deleteProductById
      parameters:
        - name: id
          in: path
          description: product id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductInput'
        '204':
          description: The product is not found with ID


  /users/{id}:
    get:
      tags:
        - user
      summary: Get a user
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDB'
        '204':
          description: The user is not found with ID
    put:
      tags:
        - user
      summary: Update a user
      operationId: updateUserById
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: A User object as input
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: A user
        '204':
          description: The user is not found with ID
        '400':
          description: Invalid JSON input
    delete:
      tags:
        - user
      summary: Delete a user
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: User has been deleted
        '204':
          description: The user is not found with ID
  /users:
    post:
      tags:
        - user
      summary: Create a user
      operationId: createUser
      requestBody:
        description: A user object as input
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created
        '400':
          description: Invalid JSON input


components:
  schemas:
    # All product related content
    ProductInput:
      type: object
      properties:
        name:
          type: string
        category:
          type: string
          enum: [Food, Decor, Habitat, Animal]
        price:
          type: number
          format: float
        description:
          type: string
      required:
        - name
        - price

    ProductDB:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        category:
          type: string
          enum: [Food, Decor, Habitat, Animal]
        price:
          type: number
          format: float
        description:
          type: string
      required:
        - id
        - name
        - price

    # All user related content
    UserInput:
      type: object
      properties:
        firstName:
          type: string
          maxLength: 50
        lastName:
          type: string
          maxLength: 50
        email:
          type: string
          format: email
          minLength: 3
          maxLength: 255
        password:
          type: string
          format: password
          minLength: 6
          maxLength: 128
          pattern: '^(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).+$'
        isAdmin:
          type: boolean
          default: false
      required:
        - firstName
        - lastName
        - email
        - password
    UserDB:
      type: object
      properties:
        id:
          type: integer
          format: int32
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 6
          maxLength: 128
          pattern: '^(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).+$'
        is_admin:
          type: boolean
          default: false
      required:
        - id
        - firstName
        - lastName
        - email
        - password